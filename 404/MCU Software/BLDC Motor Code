//BLDC MOTOR CODE
//2/19/2025
// This is working code for spinning the BLDC motor using the launchpad and ethans board. It is basically GUI.c however I changed the output to be 1 (on) and the duty to start at 5%.
// This code works in the F28x_Project.h file, need to figure out a way to make it work in driverlib
//Ran this in led_ex1_blinky

//This code also works on the MCU PCB

/*******************************************************
 * Project: BLDC Motor Control with Button Inputs
 * Author: Adrian Guzman
 * Date: [2/19/2025]
 *
 * Description:
 * This program controls a BLDC motor using two push buttons
 * connected to GPIO15 and GPIO16 on the C2000 MCU. The motor
 * spins in the desired direction when the corresponding button
 * is pressed and stops when no button is pressed.
 *
 * GPIO Pin Configuration:
 * - GPIO15 (BLDC_LEFT_CTRL): Left Control Button (Counter-Clockwise)
 *   - Configured as input with pull-up resistor.
 *   - Active LOW (button pressed -> GPIO reads 0).
 *
 * - GPIO16 (BLDC_RIGHT_CTRL): Right Control Button (Clockwise)
 *   - Configured as input with pull-up resistor.
 *   - Active LOW (button pressed -> GPIO reads 0).
 *
 * Motor Control Logic:
 * - When GPIO15 is pressed:
 *     - Motor spins counter-clockwise (direction_CCW = true).
 *     - PWM duty cycle is set to 6.0%.
 *
 * - When GPIO16 is pressed:
 *     - Motor spins clockwise (direction_CCW = false).
 *     - PWM duty cycle is set to 6.0%.
 *
 * - When neither button is pressed:
 *     - Motor stops (pwmDutyCycle = 0.0%).
 *
 * Additional Notes:
 * - The code reads GPIO states directly using bitfield access
 *   (GpioDataRegs.GPADAT.bit).
 * - PWM duty cycle is fixed at 6.0% during motion.
 * - OutputEnable is controlled implicitly via pwmDutyCycle.
 *******************************************************/



//TODO
//This GUI is incomplete
//
// Included Files
//
#include "F28x_Project.h"     // Device Header file and Examples Include File



//
// Defines

// Period register
// pin defnition
// #define nFAULT 25
#define nFAULT_A 39
#define nFAULT_B 23
#define nFAULT_C 59
//#define nSLEEP 37
#define HALLA 58
#define HALLB 30
#define HALLC 40
#define MCU_LED 25
#define VREF 3.3
//ADDEDFORCONTROL
// GPIO pins for user input control
#define BLDC_LEFT_CTRL 15   // GPIO15 for Left Control
#define BLDC_RIGHT_CTRL 16  // GPIO16 for Right Control
#define BTN12 12   // GPIO12 for Physical Left Button
#define BTN14 14   // GPIO14 for Physical Right Button
#define true 1
#define false 0


//
//#define nFAULT_flag GpioDataRegs.GPADAT.bit.GPIO25
#define nFAULT_flag_A GpioDataRegs.GPBDAT.bit.GPIO39
#define nFAULT_flag_B GpioDataRegs.GPADAT.bit.GPIO23
#define nFAULT_flag_C GpioDataRegs.GPBDAT.bit.GPIO59
//
// Typedef
//
typedef struct
{
    volatile struct EPWM_REGS *EPwmRegHandle;
} EPWM_INFO;

//
// Globals
//

Uint32 PWM_FREQ = 20000, PWM_FREQ_old, PWM_PERIOD;
Uint16 DEAD_TIME_ns = 0, DEAD_TIME_old;
float pwmDutyCycle;
int pwmTrip;
int current_duty_cycle;
int rampCounter;
int accelDelay_ms_dc = 21, accelDelay_old = 0, accelDelay = 0;
int hall_state;
int hall_read;
EPWM_INFO epwm6_info;
EPWM_INFO epwm5_info;
EPWM_INFO epwm3_info;
bool direction_CCW = true, direction_old = false;
int StopMotor = false;
int motorBrakeType = 0;

float SenseResistorValue;
float CSAgain, CSAgain_old;
float OCLIM;
//int FaultLED;
int Fault;
int VM_OV_Fault;
int VM_UV_Fault;
int OC_Fault;
//int DRV8317_Fault; //need three of them
int DRV8161_Fault_A;
int DRV8161_Fault_B;
int DRV8161_Fault_C;
int FaultRESET;
int FaultCounter;
int FaultLimit;
//vsen resistors
int VSEN_RTOP = 93.1;
int VSEN_RBOT = 4.99;
int PVDD_RTOP = 97.6;
int PVDD_RBOT = 3.01;


/*
bool spiWrite = false;
bool spiRead = false;
bool spiReadAll = false;
bool clear_fault = false;
Uint16 spi_addr = 0;
Uint16 spi_data = 0;
//Global Status Regs
struct drv8317regs{
    Uint16 IC_STAT;
    Uint16 STAT1;
    Uint16 STAT2;
    Uint16 CTRL1;
    Uint16 CTRL2;
    Uint16 CTRL3;
    Uint16 CTRL4;
    Uint16 CTRL5;
    Uint16 CTRL6;
    Uint16 CTRL10;
} drv8317regs;
*/

float VM_OVLO_LIM;
float VM_UVLO_LIM;
int VSENVM_ADCREAD;
float VSENVM_V;
int VSENA_ADCREAD;
float VSENA_V;
int VSENB_ADCREAD;
float VSENB_V;
int VSENC_ADCREAD;
float VSENC_V;
int ISENA_ADCREAD;
float ISENA_CURRENT;
int ISENB_ADCREAD;
float ISENB_CURRENT;
int ISENC_ADCREAD;
float ISENC_CURRENT;

int  OutputEnable;
//bool nSLEEP_signal = 1, nSLEEP_signal_old; // gets auto enabled upon GVDD UVLO being removed

int temp, temp1 = 0;

//
// Function Prototypes
//
//void resetDRV(void);
void DRV_InitGpio(void);
void DRV_InitGpioInput(void);
void DRV_InitGpioOutput(void);
//void InitUserInputGPIO(void);
void EPWM_Init(void);
void error (void);
void Set_HS0_LS1(EPWM_INFO *epwm_info);
void Set_HS0_LS0(EPWM_INFO *epwm_info);
void Set_PWM(EPWM_INFO *epwm_info, int duty_cycle);

void InitADCs(void);
void SetVREF(int module, int mode, int ref);
int16_t sampleADC_A(int channel);
int16_t sampleADC_B(int channel);
int16_t sampleADC_C(int channel);

/*
void Config_evm_spi(void);
Uint16 spi_xmit(Uint16 spiFrame);
Uint16 spi_write(Uint16 addr, Uint16 data);
Uint16 spi_read(Uint16 addr);
void clearFault(void);
void readAllRegisters(void);
*/

void main(void)
{
    //
    // Initialize System Control:
    // PLL, WatchDog, enable Peripheral Clocks
    //
    InitSysCtrl();

    //
    // Initialize GPIO:
    // These GPIOs control LEDs, AFE GPIOS.
    //
    InitGpio();
    InitADCs();

    DRV_InitGpioInput();
    DRV_InitGpioOutput();
//  InitUserInputGPIO();  // <-- Initialize user inputs here

    //
    // Initialize SPI
    //
    //Config_evm_spi();

    // Disable and clear all CPU interrupts
    IER = 0x0000;
    IFR = 0x0000;

    //
    //initialize the ePWM
    //

    EALLOW;
    CpuSysRegs.PCLKCR0.bit.TBCLKSYNC = 0;
    EDIS;

    EPWM_Init();

    EALLOW;
    CpuSysRegs.PCLKCR0.bit.TBCLKSYNC = 1;
    EDIS;

    //Initialize and Setup DRV
    //resetDRV();
    GPIO_WritePin(MCU_LED,1);    //set MCU LED high to turn on

    /*
    spi_write(0x03,0x03); //unlock SPI registers
    clearFault(); //Clear faults command
    readAllRegisters();
    */

    //Commutation Code and Settings
    pwmDutyCycle = 0.0;
    rampCounter = 0;
    pwmTrip = 0;
    accelDelay_ms_dc = 50;

    SenseResistorValue = 0.005;      //5mOhm sense resistor
    CSAgain = 10;                    // The default gain on the EVM based on jumper; currently 10V/V

    VM_OVLO_LIM = 90;              //Drain can go up to 105V  ; This device only has gvdd UV
    VM_UVLO_LIM = 8;                // 2V arbitrary

    OCLIM = 30;                      //30A Software Over-Current Limit

   // FaultLED = 0;// need three do below
    Fault = 0;
    VM_OV_Fault = 0;
    VM_UV_Fault = 0;
    OC_Fault = 0;
    DRV8161_Fault_A = 1;
    DRV8161_Fault_B = 1;
    DRV8161_Fault_C = 1;
    FaultRESET = 0;

    FaultCounter = 0;
    FaultLimit = 10;

    OutputEnable = 0;

    while(1)
    {

        // Ensure OutputEnable starts as 0
        OutputEnable = 0;

            // Read GPIO pins directly
            int left_pressed = (GpioDataRegs.GPADAT.bit.GPIO15 == 0);   // Active LOW
            int right_pressed = (GpioDataRegs.GPADAT.bit.GPIO16 == 0);  // Active LOW


            int btn_left_pressed  = (GpioDataRegs.GPADAT.bit.GPIO12 == 0);
            int btn_right_pressed = (GpioDataRegs.GPADAT.bit.GPIO14 == 0);


            // Control motor based on button presses
            if (left_pressed)
            {
                direction_CCW = true;    // Set direction counter-clockwise
//                OutputEnable = 1;        // Enable motor
                pwmTrip = PWM_PERIOD * (1.5 / 100);
                current_duty_cycle = PWM_PERIOD - pwmTrip;

            }
            else if (right_pressed)
            {
                direction_CCW = false;   // Set direction clockwise
//                 OutputEnable = 1;        // Enable motor
                pwmTrip = PWM_PERIOD * (1.5 / 100);
                current_duty_cycle = PWM_PERIOD - pwmTrip;

            }
            else if (btn_left_pressed)
            {
                direction_CCW = true;    // Set direction counter-clockwise
                //OutputEnable = 1;        // Enable motor
                pwmTrip = PWM_PERIOD * (1.5 / 100);
                current_duty_cycle = PWM_PERIOD - pwmTrip;

            }
            else if (btn_right_pressed)
            {
                direction_CCW = false;   // Set direction clockwise
                //OutputEnable = 1;        // Enable motor
                pwmTrip = PWM_PERIOD * (1.5 / 100);
                current_duty_cycle = PWM_PERIOD - pwmTrip;

            }
            else
            {
                pwmDutyCycle = 0.0;        // No button pressed, stop motor
            }







//        if(OutputEnable)
//        {
//            pwmDutyCycle = 6.0;
//        }
//        else
//        {
//            pwmDutyCycle = 0.0;
//        }



//        if(!OutputEnable)
//        {
//            pwmDutyCycle = 0.0;
//        }

//        else if(OutputEnable == 1)
//        {
//
////            if(Fault)
////            {
////                OutputEnable = 0;
////            }
//        }

        VSENA_ADCREAD = sampleADC_A(5);      //ADCINA5
        VSENB_ADCREAD = sampleADC_B(0);      //ADCINB0
        VSENC_ADCREAD = sampleADC_C(2);      //ADCINC2
        VSENVM_ADCREAD = sampleADC_B(1);     //ADCINB1 //VM = PVDD for this device

        ISENC_ADCREAD = sampleADC_B(2);      //ADCINB2
        ISENB_ADCREAD = sampleADC_C(0);      //ADCINC0
        ISENA_ADCREAD = sampleADC_A(9);      //ADCINA9

       /* VSENVM_V = VSENVM_ADCREAD * 0.00642653465;     //VSENVM //VM = PVDD for this device
        VSENA_V = VSENA_ADCREAD * 0.00642653465;       //VSENA
        VSENB_V = VSENB_ADCREAD * 0.00642653465;       //VSENB
        VSENC_V = VSENC_ADCREAD * 0.00642653465;       //VSENC
*/

        VSENVM_V = VSENVM_ADCREAD * (VREF/4095)*((PVDD_RTOP+PVDD_RBOT)/(PVDD_RBOT));     //VSENVM //VM = PVDD for this device
        VSENA_V = VSENA_ADCREAD * (VREF/4095)*((VSEN_RTOP+VSEN_RBOT)/(VSEN_RBOT));       //VSENA
        VSENB_V = VSENB_ADCREAD * (VREF/4095)*((VSEN_RTOP+VSEN_RBOT)/(VSEN_RBOT));       //VSENB
        VSENC_V = VSENC_ADCREAD * (VREF/4095)*((VSEN_RTOP+VSEN_RBOT)/(VSEN_RBOT));       //VSENC

        ISENA_CURRENT = (((VREF/2)-(float)(ISENA_ADCREAD+100) / 4095 * VREF)) / (SenseResistorValue * CSAgain) ;
        ISENB_CURRENT = (((VREF/2)-(float)(ISENB_ADCREAD+100) / 4095 * VREF)) / (SenseResistorValue * CSAgain) ;
        ISENC_CURRENT = (((VREF/2)-(float)(ISENC_ADCREAD+100) / 4095 * VREF)) / (SenseResistorValue * CSAgain) ;

        if(nFAULT_flag_A == 0 || nFAULT_flag_B == 0 || nFAULT_flag_C == 0 || VSENVM_V > VM_OVLO_LIM || VSENVM_V < VM_UVLO_LIM || ISENA_CURRENT > OCLIM || ISENB_CURRENT > OCLIM || ISENC_CURRENT > OCLIM)
        {

            FaultCounter++;

            if(FaultCounter >= FaultLimit)
            {
                Fault = 1;

                if(VSENVM_V > VM_OVLO_LIM)        //VM OV/UV
                {
                    VM_OV_Fault = 1;
                }

                if(VSENVM_V < VM_UVLO_LIM)        //VM OV/UV
                {
                    VM_UV_Fault = 1;
                }

                if(ISENA_CURRENT > OCLIM || ISENB_CURRENT > OCLIM || ISENC_CURRENT > OCLIM)              //Over-Current
                {
                    OC_Fault = 1;
                }

                if(nFAULT_flag_A == 0)
                {
                    DRV8161_Fault_A = 1;

                }
                if(nFAULT_flag_B == 0)
                {

                    DRV8161_Fault_B = 1;

                }
                if(nFAULT_flag_C == 0)
                {

                    DRV8161_Fault_C = 1;
                }
                OutputEnable = 0;
                FaultCounter = 0;
            }
        }
        else                                            //if no FAULT this cycle, reset the fault counter
        {
            FaultCounter = 0;
        }

        //Clear faults
        if(FaultRESET)                                 //clear all FAULT bits and FAULT LED
        {
            //FaultLED = 0;
            Fault = 0;
            VM_OV_Fault = 0;
            VM_UV_Fault = 0;
            //DRV8317_Fault = 0;
            DRV8161_Fault_A = 0;
            DRV8161_Fault_B = 0;
            DRV8161_Fault_C = 0;
            OC_Fault = 0;
            FaultRESET = 0;
            FaultCounter = 0;

           // resetDRV(); //Clear faults command

//            GPIO_WritePin(nSLEEP,0); //nSLEEP reset pulse = 20us
//            for (temp=0;temp<500;temp++);
//            GPIO_WritePin(nSLEEP,1); //nSLEEP reset pulse

            // to clear a VDS latched fault for INH and INL has to be low for tclrflt time
            Set_HS0_LS0(&epwm6_info);
            Set_HS0_LS0(&epwm5_info);
            Set_HS0_LS0(&epwm3_info);
            for (temp=0;temp<30000;temp++)
            {
                if (nFAULT_flag_A == 1 && nFAULT_flag_B == 1 && nFAULT_flag_C == 1)
                       {
                           break;
                       }
            }

        }

 /*       if(nSLEEP_signal != nSLEEP_signal_old)
        {
            nSLEEP_signal_old = nSLEEP_signal;
            if (nSLEEP_signal)
            {
                GPIO_WritePin(nSLEEP,1);
            }
            else
            {
                GPIO_WritePin(nSLEEP,0);
            }
        }
*/
        if (PWM_FREQ != PWM_FREQ_old)
        {
            PWM_FREQ_old = PWM_FREQ;
            PWM_PERIOD = 48300000/PWM_FREQ;
            EPwm6Regs.TBPRD = PWM_PERIOD;
            EPwm5Regs.TBPRD = PWM_PERIOD;
            EPwm3Regs.TBPRD = PWM_PERIOD;
        }

        if (DEAD_TIME_ns != DEAD_TIME_old)
        {
            DEAD_TIME_old = DEAD_TIME_ns;
            EPwm6Regs.DBFED.bit.DBFED = DEAD_TIME_ns * 0.1;
            EPwm6Regs.DBRED.bit.DBRED = DEAD_TIME_ns * 0.1;
            EPwm5Regs.DBFED.bit.DBFED = DEAD_TIME_ns * 0.1;
            EPwm5Regs.DBRED.bit.DBRED = DEAD_TIME_ns * 0.1;
            EPwm3Regs.DBFED.bit.DBFED = DEAD_TIME_ns * 0.1;
            EPwm3Regs.DBRED.bit.DBRED = DEAD_TIME_ns * 0.1;
        }

        if (CSAgain != CSAgain_old)
        {
            CSAgain_old = CSAgain;
            /*
            if (CSAgain == 0.15)
            {
                Uint16 temp = spi_read(0x07);
                temp |= 0x00;
                spi_write(0x07, temp);
            }
            else if (CSAgain == 0.3)
            {
                Uint16 temp = spi_read(0x07);
                temp |= 0x01;
                spi_write(0x07, temp);
            }
            else if (CSAgain == 0.6)
            {
                Uint16 temp = spi_read(0x07);
                temp |= 0x02;
                spi_write(0x07, temp);
            }
            else if (CSAgain == 1.2)
            {
                Uint16 temp = spi_read(0x07);
                temp |= 0x03;
                spi_write(0x07, temp);
            }
            */
        }

        while (StopMotor)
        {
            if (motorBrakeType == 0) //Brake
            {
                Set_HS0_LS1(&epwm6_info);
                Set_HS0_LS1(&epwm5_info);
                Set_HS0_LS1(&epwm3_info);
            }
            if (motorBrakeType == 1) //Coast
            {
                Set_HS0_LS0(&epwm6_info);
                Set_HS0_LS0(&epwm5_info);
                Set_HS0_LS0(&epwm3_info);
            }
            current_duty_cycle = PWM_PERIOD;
            pwmTrip = 0;
        }

        if (direction_CCW != direction_old)
        {
            direction_old = direction_CCW;
            //Coast Motor for 1 second, reset PWM period value, ramp up in opposite direction to new duty cycle
            //Coast motor
            Set_HS0_LS0(&epwm6_info);
            Set_HS0_LS0(&epwm5_info);
            Set_HS0_LS0(&epwm3_info);
            //Wait 1 second
            for (temp=0;temp<500;temp++){
                for (temp1=0;temp1<500;temp1++); //speed 500 works good, 3000 was original value
            }
            current_duty_cycle = PWM_PERIOD;
            pwmTrip = 0;
        }

        if (accelDelay_ms_dc != accelDelay_old)
        {
            accelDelay_old = accelDelay_ms_dc;
            accelDelay = (Uint16)((float)(accelDelay_ms_dc)*2.381);
        }

        rampCounter++;

        if(rampCounter == accelDelay)
         {
           if(pwmTrip < (PWM_PERIOD * (pwmDutyCycle/100)))
           {
               pwmTrip = pwmTrip + 1;
           }
           else if(pwmTrip > (PWM_PERIOD * (pwmDutyCycle/100)))
           {
               pwmTrip = pwmTrip - 1;
           }
           rampCounter = 0;
         }

        current_duty_cycle = PWM_PERIOD - pwmTrip;

        //Check Hall Sensors
        hall_read = ((GpioDataRegs.GPBDAT.bit.GPIO58 << 2) | (GpioDataRegs.GPADAT.bit.GPIO30 << 1) | (GpioDataRegs.GPBDAT.bit.GPIO40 << 0));
        hall_state = (hall_read^0xF)&0x7;
        //hall_state = 4;

        if (direction_CCW)
        {
            if (hall_state)
            {
                switch(hall_state)
                {
                case 1:
                    //B-C
                    Set_HS0_LS0(&epwm6_info);
                    Set_PWM(&epwm5_info, current_duty_cycle);
                    Set_HS0_LS1(&epwm3_info);
                    break;
                case 2:
                    //A-B
                    Set_PWM(&epwm6_info, current_duty_cycle);
                    Set_HS0_LS1(&epwm5_info);
                    Set_HS0_LS0(&epwm3_info);
                    break;
                case 3:
                    //A-C
                    Set_PWM(&epwm6_info, current_duty_cycle);
                    Set_HS0_LS0(&epwm5_info);
                    Set_HS0_LS1(&epwm3_info);
                    break;
                case 4:
                    //C-A
                    Set_HS0_LS1(&epwm6_info);
                    Set_HS0_LS0(&epwm5_info);
                    Set_PWM(&epwm3_info, current_duty_cycle);
                    break;
                case 5:
                    //B-A
                    Set_HS0_LS1(&epwm6_info);
                    Set_PWM(&epwm5_info, current_duty_cycle);
                    Set_HS0_LS0(&epwm3_info);
                    break;
                case 6:
                    //C-B
                    Set_HS0_LS0(&epwm6_info);
                    Set_HS0_LS1(&epwm5_info);
                    Set_PWM(&epwm3_info, current_duty_cycle);
                    break;
                } //end of switch
            } //end of if
        }
        else
        {
            if (hall_state)
            {
                switch(hall_state)
                {
                case 6:
                    //B-C
                    Set_HS0_LS0(&epwm6_info);
                    Set_PWM(&epwm5_info, current_duty_cycle);
                    Set_HS0_LS1(&epwm3_info);
                    break;
                case 5:
                    //A-B
                    Set_PWM(&epwm6_info, current_duty_cycle);
                    Set_HS0_LS1(&epwm5_info);
                    Set_HS0_LS0(&epwm3_info);
                    break;
                case 4:
                    //A-C
                    Set_PWM(&epwm6_info, current_duty_cycle);
                    Set_HS0_LS0(&epwm5_info);
                    Set_HS0_LS1(&epwm3_info);
                    break;
                case 3:
                    //C-A
                    Set_HS0_LS1(&epwm6_info);
                    Set_HS0_LS0(&epwm5_info);
                    Set_PWM(&epwm3_info, current_duty_cycle);
                    break;
                case 2:
                    //B-A
                    Set_HS0_LS1(&epwm6_info);
                    Set_PWM(&epwm5_info, current_duty_cycle);
                    Set_HS0_LS0(&epwm3_info);
                    break;
                case 1:
                    //C-B
                    Set_HS0_LS0(&epwm6_info);
                    Set_HS0_LS1(&epwm5_info);
                    Set_PWM(&epwm3_info, current_duty_cycle);
                    break;
                } //end of switch(hall_state)
            } //end of if(hall_state)
        } //end of if(direction)

        /*
        //real time SPI reads and writes
        if (spiWrite)
        {
            spi_write(spi_addr,spi_data);
            spiWrite = false;
        }

        if (spiRead)
        {
            spi_data = spi_read(spi_addr);
            spiRead = false;
        }

        if (spiReadAll)
        {
            readAllRegisters();
            spiReadAll = false;
        }

        if (clear_fault)
        {
            clearFault();
            clear_fault = false;
        }
        */
    } //end of while
}

//
// DRV_InitGpio - Initialize the GPIOs on launchpad and boosterpack
//
void DRV_InitGpioInput()
{
    EALLOW; // below registers are "protected", allow access.
    // GPIO DRV Hall A
    GPIO_SetupPinMux(HALLA, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(HALLA, GPIO_INPUT, 0);

    // GPIO DRV Hall B
    GPIO_SetupPinMux(HALLB, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(HALLB, GPIO_INPUT, 0);

    // GPIO DRV Hall C
    GPIO_SetupPinMux(HALLC, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(HALLC, GPIO_INPUT, 0);

/*  // nFAULT
    GPIO_SetupPinMux(nFAULT, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(nFAULT, GPIO_INPUT, GPIO_PULLUP);
*/

    //nFault A
    GPIO_SetupPinMux(nFAULT_A, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(nFAULT_A, GPIO_INPUT, GPIO_PULLUP);

    //nFault B
    GPIO_SetupPinMux(nFAULT_B, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(nFAULT_B, GPIO_INPUT, GPIO_PULLUP);

    //nFault C
    GPIO_SetupPinMux(nFAULT_C, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(nFAULT_C, GPIO_INPUT, GPIO_PULLUP);



    EDIS;
    // Disable register access
}

void DRV_InitGpioOutput()
{
    EALLOW;

    //INHA DRV
    GpioCtrlRegs.GPADIR.bit.GPIO10 = 1;
    GpioCtrlRegs.GPAPUD.bit.GPIO10 = 1;    // Disable pull-up on GPIO10 (EPWM6A)
    GpioCtrlRegs.GPAMUX1.bit.GPIO10 = 1;   // Configure GPIO10 as EPWM6A
    //INLA DRV
    GpioCtrlRegs.GPADIR.bit.GPIO11 = 1;
    GpioCtrlRegs.GPAPUD.bit.GPIO11 = 1;    //...
    GpioCtrlRegs.GPAMUX1.bit.GPIO11 = 1;
    //INHB DRV
    GpioCtrlRegs.GPADIR.bit.GPIO8 = 1;
    GpioCtrlRegs.GPAPUD.bit.GPIO8 = 1;
    GpioCtrlRegs.GPAMUX1.bit.GPIO8 = 1;
    //INLB DRV
    GpioCtrlRegs.GPADIR.bit.GPIO9 = 1;
    GpioCtrlRegs.GPAPUD.bit.GPIO9 = 1;
    GpioCtrlRegs.GPAMUX1.bit.GPIO9 = 1;
    //INHC DRV
    GpioCtrlRegs.GPADIR.bit.GPIO4 = 1;
    GpioCtrlRegs.GPAPUD.bit.GPIO4 = 1;
    GpioCtrlRegs.GPAMUX1.bit.GPIO4 = 1;
    //INLC DRV
    GpioCtrlRegs.GPADIR.bit.GPIO5 = 1;
    GpioCtrlRegs.GPAPUD.bit.GPIO5 = 1;
    GpioCtrlRegs.GPAMUX1.bit.GPIO5 = 1;

    //MCU LED
    GPIO_SetupPinMux(MCU_LED, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(MCU_LED, GPIO_OUTPUT, GPIO_PUSHPULL);

 /*   //nSLEEP (no nsleep in this device)
    GPIO_SetupPinMux(nSLEEP, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(nSLEEP, GPIO_OUTPUT, GPIO_PUSHPULL);
    GPIO_WritePin(nSLEEP,1);
*/

    // Setup Left Control Button (GPIO15)
    GPIO_SetupPinMux(BLDC_LEFT_CTRL, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(BLDC_LEFT_CTRL, GPIO_INPUT, GPIO_PULLUP);  // Pull-up to keep HIGH when unpressed

    // Setup Right Control Button (GPIO16)
    GPIO_SetupPinMux(BLDC_RIGHT_CTRL, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(BLDC_RIGHT_CTRL, GPIO_INPUT, GPIO_PULLUP);  // Pull-up to keep HIGH when unpressed


    GPIO_SetupPinMux(BTN12, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(BTN12, GPIO_INPUT, GPIO_PULLUP);  // Pull-up to keep HIGH when unpressed

    // Setup Right Control Button (GPIO16)
    GPIO_SetupPinMux(BTN14, GPIO_MUX_CPU1, 0);
    GPIO_SetupPinOptions(BTN14, GPIO_INPUT, GPIO_PULLUP);  // Pull-up to keep HIGH when unpressed

    EDIS;
}

//void InitUserInputGPIO(void)
//{
//    EALLOW;
//
//    // Setup Left Control Button (GPIO15)
//    GPIO_SetupPinMux(BLDC_LEFT_CTRL, GPIO_MUX_CPU1, 0);
//    GPIO_SetupPinOptions(BLDC_LEFT_CTRL, GPIO_INPUT, GPIO_PULLUP);  // Pull-up to keep HIGH when unpressed
//
//    // Setup Right Control Button (GPIO16)
//    GPIO_SetupPinMux(BLDC_RIGHT_CTRL, GPIO_MUX_CPU1, 0);
//    GPIO_SetupPinOptions(BLDC_RIGHT_CTRL, GPIO_INPUT, GPIO_PULLUP);  // Pull-up to keep HIGH when unpressed
//
//    EDIS;
//}





//
// EPWM_Init - Initialize EPWM configuration
//
void EPWM_Init()
{
    //
    // enable PWM6, PWM5 and PWM3
    //
    CpuSysRegs.PCLKCR2.bit.EPWM6=1;
    CpuSysRegs.PCLKCR2.bit.EPWM5=1;
    CpuSysRegs.PCLKCR2.bit.EPWM3=1;
    //
    // Setup TBCLK
    //
    EPwm6Regs.TBPRD = PWM_PERIOD;                // Set timer period 16000 TBCLKs
    EPwm6Regs.TBPHS.bit.TBPHS = 0x0000;          // Phase is 0
    EPwm6Regs.TBCTR = 0x0000;                    // Clear counter
    EPwm5Regs.TBPRD = PWM_PERIOD;                // Set timer period 16000 TBCLKs
    EPwm5Regs.TBPHS.bit.TBPHS = 0x0000;          // Phase is 0
    EPwm5Regs.TBCTR = 0x0000;                    // Clear counter
    EPwm3Regs.TBPRD = PWM_PERIOD;                // Set timer period 16000 TBCLKs
    EPwm3Regs.TBPHS.bit.TBPHS = 0x0000;          // Phase is 0
    EPwm3Regs.TBCTR = 0x0000;                    // Clear counter

    //
    // Setup counter mode
    //
    EPwm6Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN;    // Count up/down
    EPwm6Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;      // Clock ratio to SYSCLKOUT
    EPwm6Regs.TBCTL.bit.CLKDIV = TB_DIV1;
    EPwm5Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN;    // Count up/down
    EPwm5Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;      // Clock ratio to SYSCLKOUT
    EPwm5Regs.TBCTL.bit.CLKDIV = TB_DIV1;
    EPwm3Regs.TBCTL.bit.CTRMODE = TB_COUNT_UPDOWN;    // Count up/down
    EPwm3Regs.TBCTL.bit.HSPCLKDIV = TB_DIV1;      // Clock ratio to SYSCLKOUT
    EPwm3Regs.TBCTL.bit.CLKDIV = TB_DIV1;

    //
    // Setup shadowing
    //
    EPwm6Regs.CMPCTL.bit.SHDWAMODE = CC_SHADOW;
    EPwm6Regs.CMPCTL.bit.SHDWBMODE = CC_SHADOW;
    EPwm6Regs.CMPCTL.bit.LOADAMODE = CC_CTR_ZERO; // Load on Zero
    EPwm6Regs.CMPCTL.bit.LOADBMODE = CC_CTR_ZERO;
    EPwm5Regs.CMPCTL.bit.SHDWAMODE = CC_SHADOW;
    EPwm5Regs.CMPCTL.bit.SHDWBMODE = CC_SHADOW;
    EPwm5Regs.CMPCTL.bit.LOADAMODE = CC_CTR_ZERO; // Load on Zero
    EPwm5Regs.CMPCTL.bit.LOADBMODE = CC_CTR_ZERO;
    EPwm3Regs.CMPCTL.bit.SHDWAMODE = CC_SHADOW;
    EPwm3Regs.CMPCTL.bit.SHDWBMODE = CC_SHADOW;
    EPwm3Regs.CMPCTL.bit.LOADAMODE = CC_CTR_ZERO; // Load on Zero
    EPwm3Regs.CMPCTL.bit.LOADBMODE = CC_CTR_ZERO;

    EPwm6Regs.AQCTLA.bit.CAU = AQ_SET; // set actions for EPWM1A
    EPwm6Regs.AQCTLA.bit.CAD = AQ_CLEAR;
    EPwm6Regs.DBCTL.bit.OUT_MODE = DB_FULL_ENABLE; // enable Dead-band module
    EPwm6Regs.DBCTL.bit.POLSEL = DB_ACTV_HIC; // Active Hi complementary
    EPwm6Regs.DBFED.bit.DBFED = DEAD_TIME_ns * 0.1;
    EPwm6Regs.DBRED.bit.DBRED = DEAD_TIME_ns * 0.1;
    EPwm5Regs.AQCTLA.bit.CAU = AQ_SET; // set actions for EPWM1A
    EPwm5Regs.AQCTLA.bit.CAD = AQ_CLEAR;
    EPwm5Regs.DBCTL.bit.OUT_MODE = DB_FULL_ENABLE; // enable Dead-band module
    EPwm5Regs.DBCTL.bit.POLSEL = DB_ACTV_HIC; // Active Hi complementary
    EPwm5Regs.DBFED.bit.DBFED = DEAD_TIME_ns * 0.1;
    EPwm5Regs.DBRED.bit.DBRED = DEAD_TIME_ns * 0.1;
    EPwm3Regs.AQCTLA.bit.CAU = AQ_SET; // set actions for EPWM1A
    EPwm3Regs.AQCTLA.bit.CAD = AQ_CLEAR;
    EPwm3Regs.DBCTL.bit.OUT_MODE = DB_FULL_ENABLE; // enable Dead-band module
    EPwm3Regs.DBCTL.bit.POLSEL = DB_ACTV_HIC; // Active Hi complementary
    EPwm3Regs.DBFED.bit.DBFED = DEAD_TIME_ns * 0.1;
    EPwm3Regs.DBRED.bit.DBRED = DEAD_TIME_ns * 0.1;

    //
    //Disable Interrupt
    //
    EPwm6Regs.ETSEL.bit.INTEN = 0;                // disable INT
    EPwm5Regs.ETSEL.bit.INTEN = 0;                // disable INT
    EPwm3Regs.ETSEL.bit.INTEN = 0;                // disable INT


    //Set Handles
    epwm6_info.EPwmRegHandle = &EPwm6Regs;
    epwm5_info.EPwmRegHandle = &EPwm5Regs;
    epwm3_info.EPwmRegHandle = &EPwm3Regs;

    //Set Initial Compare values to be counter + 1 so that low side gates turn on and stay on to charge HS bootstrap
    EPwm6Regs.CMPA.bit.CMPA = PWM_PERIOD + 1;
    EPwm5Regs.CMPA.bit.CMPA = PWM_PERIOD + 1;
    EPwm3Regs.CMPA.bit.CMPA = PWM_PERIOD + 1;
}
void Set_HS0_LS1(EPWM_INFO *epwm_info)
{
    epwm_info->EPwmRegHandle->DBCTL.bit.POLSEL = DB_ACTV_HIC;    //set to keep low side on
    epwm_info->EPwmRegHandle->CMPA.bit.CMPA = (PWM_PERIOD + 1); // Set so PWM counter never trips, keeping high side off
}

void Set_HS0_LS0(EPWM_INFO *epwm_info)
{
    epwm_info->EPwmRegHandle->DBCTL.bit.POLSEL = DB_ACTV_HI;     //Set to keep low side off
    epwm_info->EPwmRegHandle->CMPA.bit.CMPA = (PWM_PERIOD + 1); // Set so PWM counter never trips, keeping high side off
}

void Set_PWM(EPWM_INFO *epwm_info, int duty_cycle)
{
    epwm_info->EPwmRegHandle->DBCTL.bit.POLSEL = DB_ACTV_HIC;
    epwm_info->EPwmRegHandle->CMPA.bit.CMPA = duty_cycle;
}

void InitADCs()
{
           //
           // Set the VREF to internal
           //
           SetVREF(ADC_ADCA, ADC_INTERNAL, ADC_VREF3P3);
           SetVREF(ADC_ADCB, ADC_INTERNAL, ADC_VREF3P3);
           SetVREF(ADC_ADCC, ADC_INTERNAL, ADC_VREF3P3);

           //
           // Configure the ADC: Initialize the ADC
           //
           EALLOW;

           //
           // write configurations
           //
           AdcaRegs.ADCCTL2.bit.PRESCALE = 6;      // set ADCCLK divider to /4
           AdcbRegs.ADCCTL2.bit.PRESCALE = 6;
           AdccRegs.ADCCTL2.bit.PRESCALE = 6;
           //
           // Set pulse positions to late
           //
           AdcaRegs.ADCCTL1.bit.INTPULSEPOS = 1;
           AdcbRegs.ADCCTL1.bit.INTPULSEPOS = 1;
           AdccRegs.ADCCTL1.bit.INTPULSEPOS = 1;

           //
           // power up the ADCs
           //
           AdcaRegs.ADCCTL1.bit.ADCPWDNZ = 1;
           AdcbRegs.ADCCTL1.bit.ADCPWDNZ = 1;
           AdccRegs.ADCCTL1.bit.ADCPWDNZ = 1;

           //
           // delay for 1ms to allow ADC time to power up
           //
           DELAY_US(1000);

           EALLOW;

}

void SetVREF(int module, int mode, int ref)
{
    Uint16 *offset, offval;

    //
    // Define offset locations from OTP
    //
    offset = (Uint16 *)(0x70594 + (module * 6));

    if((mode == ADC_INTERNAL) && (ref == ADC_VREF3P3))
    {
        offval = (*offset) >> 8;    // Internal / 1.65v mode offset
    }
    else
    {
        offval = (*offset) & 0xFF;  // All other modes
    }

    //
    // Write offset trim values and configure reference modes
    //
    EALLOW;
    switch(module)
    {
        case 0:
            AdcaRegs.ADCOFFTRIM.bit.OFFTRIM = offval;
            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFASEL = mode;
            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFA2P5SEL = ref;
            break;
        case 1:
            AdcbRegs.ADCOFFTRIM.bit.OFFTRIM = offval;
            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFBSEL = mode;
            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFB2P5SEL = ref;
            break;
        case 2:
            AdccRegs.ADCOFFTRIM.bit.OFFTRIM = offval;
            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFCSEL = mode;
            AnalogSubsysRegs.ANAREFCTL.bit.ANAREFC2P5SEL = ref;
            break;
        default:
            break;
    }
    EDIS;
}

int16_t sampleADC_A(int channel)
{
    int16_t sample;

    EALLOW;

    AdcaRegs.ADCSOC0CTL.bit.CHSEL = channel;

    AdcaRegs.ADCSOC0CTL.bit.ACQPS = 25;
    AdcaRegs.ADCINTSEL1N2.bit.INT1SEL = 1;          //end of SOC1 will set INT1 flag
    AdcaRegs.ADCINTSEL1N2.bit.INT1E = 1;            //enable INT1 flag
    AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;          //make sure INT1 flag is cleared

    AdcaRegs.ADCSOCFRC1.all = 0x03;                 // Force start of conversion on SOC0

    while(AdcaRegs.ADCINTFLG.bit.ADCINT1 == 0)      // Wait for end of conversion.
    {
         // Wait for ADCINT1
    }
    AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;          // Clear ADCINT1

    sample = AdcaResultRegs.ADCRESULT0;             // Get ADC sample result from SOC0

    return(sample);
}

int16_t sampleADC_B(int channel)
{
    int16_t sample;

    EALLOW;

    AdcbRegs.ADCSOC0CTL.bit.CHSEL = channel;

    AdcbRegs.ADCSOC0CTL.bit.ACQPS = 25;
    AdcbRegs.ADCINTSEL1N2.bit.INT1SEL = 1;          //end of SOC1 will set INT1 flag
    AdcbRegs.ADCINTSEL1N2.bit.INT1E = 1;            //enable INT1 flag
    AdcbRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;          //make sure INT1 flag is cleared

    AdcbRegs.ADCSOCFRC1.all = 0x03;                 // Force start of conversion on SOC0

    while(AdcbRegs.ADCINTFLG.bit.ADCINT1 == 0)      // Wait for end of conversion.
    {
         // Wait for ADCINT1
    }
    AdcbRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;          // Clear ADCINT1

    sample = AdcbResultRegs.ADCRESULT0;             // Get ADC sample result from SOC0

    return(sample);
}

int16_t sampleADC_C(int channel)
{
    int16_t sample;

    EALLOW;

    AdccRegs.ADCSOC0CTL.bit.CHSEL = channel;
    AdccRegs.ADCSOC0CTL.bit.ACQPS = 25;
    AdccRegs.ADCINTSEL1N2.bit.INT1SEL = 1;  //end of SOC1 will set INT1 flag
    AdccRegs.ADCINTSEL1N2.bit.INT1E = 1;    //enable INT1 flag
    AdccRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;  //make sure INT1 flag is cleared

    AdccRegs.ADCSOCFRC1.all = 0x03;                 // Force start of conversion on SOC0

    while(AdccRegs.ADCINTFLG.bit.ADCINT1 == 0)       // Wait for end of conversion.
    {
        // Wait for ADCINT1
    }
    AdccRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;          // Clear ADCINT1

    sample = AdccResultRegs.ADCRESULT0;             // Get ADC sample result from SOC0

    return(sample);
}

/* No nsleep reset pulse in this device
void resetDRV(void){    //set nSLEEP low for 40us
    GPIO_WritePin(nSLEEP,0);
    int i;
    for(i=0;i<4000;i++);
    GPIO_WritePin(nSLEEP,1);
}
*/
/*
//
// error - Halt debugger when called
//

void Config_evm_spi(void)
{
    //Pin Config
    EALLOW;
    // SPI_MOSI
    GPIO_SetupPinOptions(16, GPIO_INPUT, GPIO_ASYNC | GPIO_PULLUP);
    // SPI_MISO
    GPIO_SetupPinOptions(17, GPIO_INPUT, GPIO_ASYNC | GPIO_PULLUP);
    // SPI_CS
    GPIO_SetupPinOptions(56, GPIO_INPUT, GPIO_ASYNC | GPIO_PULLUP);
    // SPI_CLK
    GPIO_SetupPinOptions(57, GPIO_INPUT, GPIO_ASYNC | GPIO_PULLUP);

    GPIO_SetupPinMux(16, GPIO_MUX_CPU1, 1);
    GPIO_SetupPinMux(17, GPIO_MUX_CPU1, 1);
    GPIO_SetupPinMux(56, GPIO_MUX_CPU1, 1);
    GPIO_SetupPinMux(57, GPIO_MUX_CPU1, 1);
    EDIS;

    EALLOW;
    ClkCfgRegs.LOSPCP.all = 0;
    EDIS;

    // Initialize SPI FIFO registers
    SpiaRegs.SPIFFTX.all=0xE040;
    SpiaRegs.SPIFFRX.all=0x2044;
    SpiaRegs.SPIFFCT.all=0x0;

    //SPI Settings
    SpiaRegs.SPICCR.bit.SPISWRESET = 0;     //SPI Reset On
    SpiaRegs.SPICCR.bit.CLKPOLARITY = 0;    //SCLK Active High
    SpiaRegs.SPICCR.bit.SPICHAR = 0xF;      //16-bit SPI char
    SpiaRegs.SPICCR.bit.SPILBK = 0;

    SpiaRegs.SPICTL.bit.OVERRUNINTENA = 0;  //No overrun interrupt
    SpiaRegs.SPICTL.bit.CLK_PHASE = 0;      //Phase 0
    SpiaRegs.SPICTL.bit.MASTER_SLAVE = 1;   //Master mode
    SpiaRegs.SPICTL.bit.TALK = 1;           //nSCS enabled
    SpiaRegs.SPICTL.bit.SPIINTENA = 0;      //TX/RX Interrupt Disabled

    SpiaRegs.SPIBRR.bit.SPI_BIT_RATE = ((25000000 / 1000000) - 1);              //Set baud rate to 1MHz
    SpiaRegs.SPIPRI.bit.FREE = 1;           //Set so breakpoints don't disturb transmission
    SpiaRegs.SPICCR.bit.SPISWRESET = 1;   //Exit SPI reset

}

Uint16 spi_xmit(Uint16 spiFrame)
{
    SpiaRegs.SPITXBUF=spiFrame;

    //Wait for RX flag to indicate SPI frame completion
    while(SpiaRegs.SPIFFRX.bit.RXFFST != 1)
    {
    }

    return SpiaRegs.SPIRXBUF;
}

Uint16 spi_read(Uint16 addr)
{
    Uint16 commandword = 0;
    uint16_t p_addr = addr;
    uint16_t p_data = 0;

    uint16_t calc = ((p_addr << 9) & 0x7E00) | (p_data & 0x00FF);
    uint16_t parity = 0;
    while(calc)
    {
       parity ^= (calc & 1);
       calc >>= 1;
    }

    commandword = (0x8000 | (addr << 9) | (parity << 8));
    return spi_xmit(commandword);
}

Uint16 spi_write(Uint16 addr, Uint16 data)
{
    Uint16 commandword = 0;
    uint16_t p_addr = addr;
    uint16_t p_data = data;

    uint16_t calc = ((p_addr << 9) & 0x7E00) | (p_data & 0x00FF);
    uint16_t parity = 0;
    while(calc)
    {
       parity ^= (calc & 1);
       calc >>= 1;
    }

    commandword = ((addr << 9) | (parity << 8) | data);
    return spi_xmit(commandword);
}

void readAllRegisters(void){
    drv8317regs.IC_STAT = spi_read(0x00) & 0xFF;
    drv8317regs.STAT1 = spi_read(0x01) & 0xFF;
    drv8317regs.STAT2 = spi_read(0x02) & 0xFF;
    drv8317regs.CTRL1 = spi_read(0x03) & 0xFF;
    drv8317regs.CTRL2 = spi_read(0x04) & 0xFF;
    drv8317regs.CTRL3 = spi_read(0x05) & 0xFF;
    drv8317regs.CTRL4 = spi_read(0x06) & 0xFF;
    drv8317regs.CTRL5 = spi_read(0x07) & 0xFF;
    drv8317regs.CTRL6 = spi_read(0x08) & 0xFF;
    drv8317regs.CTRL10 = spi_read(0x0C) & 0xFF;
}

void clearFault(void){
    Uint16 temp = spi_read(0x04);
    temp |= 0x01;
    spi_write(0x04, temp);
}
*/

void error(void)
{
    ESTOP0;         // Stop here and handle error
}


//
// End of file
//

